- name: Set WireGuard Netplan Facts
  set_fact:
    wireguard_config_facts: 
      interfaces: |
          {
            {% for interface in wireguard_interfaces %}
            "{{ interface.name }}": {{ interface }},
            {% endfor %}
          }

- name: Convert Peers to Dict
  set_fact: 
    wireguard_config_facts: "{{ wireguard_config_facts | combine(update_dict, recursive=true) }}"
  loop: "{{ wireguard_config_facts.interfaces | dict2items }}"
  loop_control:
    loop_var: interface_item
    label: "{{ interface_item.key }}"
  vars:
    interface:
      name: "{{ interface_item.value.name }}"
      config: "{{ interface_item.value }}"
    peers_dict: | 
      {
          {% for peer in interface.config.peers %}
          "{{ peer.name }}__{{ peer.interface }}": {{ peer }},
          {% endfor %}
      }
    update_dict:
      interfaces: |
        {
          "{{ interface.name }}": {
            {% if interface.config.peers is defined %}
            "peers": {
              {% for peer in interface.config.peers %}
              "{{ peer.name }}__{{ peer.interface }}": {{ peer }},
              {% endfor %}
            },
            {% endif %}
            {% if interface.config.unmanaged_peers is defined %}
            "unmanaged_peers": {
              {% for peer in interface.config.unmanaged_peers %}
              "{{ peer.name }}": {{ peer }},
              {% endfor %}
            },
            {% endif %}
          }
        }


- name: Check wg syncconf
  block:
    - name: Get wg subcommands
      command: "wg --help"
      register: wireguard__register_subcommands
      changed_when: false
      check_mode: false

    - name: Check if wg syncconf subcommand is available
      set_fact:
        wireguard_config_facts: "{{ wireguard_config_facts | combine(update_dict, recursive=true) }}"
      vars:
        update_dict: |
          {
            "wg_syncconf": {{ 'syncconf:' in wireguard__register_subcommands.stdout }}
          }  

  tags: 
    - wg-generate-keys
    - wg-config

- name: Handle Key Facts
  include_tasks:
    file: wireguard_keys.yml
    apply:
      vars:
        interface:
          name: "{{ interface_item.value.name }}"
          config: "{{ interface_item.value }}"
  loop: "{{ wireguard_config_facts.interfaces | dict2items }}"
  loop_control:
    label: "{{ interface_item.key }}"
    loop_var: interface_item
  when:
    - interface_item.value.state | default('present') != 'absent'

- name: Handle Peers Facts
  include_tasks:
    file: wireguard_peers.yml
    apply:
      vars:
        interface:
          name: "{{ interface_item.value.name }}"
          config: "{{ interface_item.value }}"
  loop: "{{ wireguard_config_facts.interfaces | dict2items }}"
  loop_control:
    label: "{{ interface_item.key }}"
    loop_var: interface_item
  when:
    - interface_item.value.state | default('present') != 'absent'

- name: Generate Interface Config
  include_tasks:
    file: wireguard_interface.yml
    apply:
      vars:
        interface:
          name: "{{ interface_item.value.name }}"
          config: "{{ interface_item.value }}"
  loop: "{{ wireguard_config_facts.interfaces | dict2items }}"
  loop_control:
    label: "{{ interface_item.key }}"
    loop_var: interface_item
  when:
    - interface_item.value.state | default('present') != 'absent'

- name: Debug 3
  debug: 
    msg: "{{ wireguard_config_facts }}"

- name: Start and enable WireGuard service
  service:
    name: "wg-quick@{{ interface_name }}"
    state: "{{ wireguard_service_state }}"
    enabled: "{{ wireguard_service_enabled }}"
  loop: "{{ wireguard_config_facts.interfaces | dict2items }}"
  loop_control:
    label: "{{ interface_item.key }}"
    loop_var: interface_item
  vars:
    interface_name: "{{ interface_item.key }}"
  when:
    - wireguard_renderer | default('wireguard') == 'wireguard'


- name: Setup IPTables
  include_tasks:
    file: setup_iptables.yml
    apply:
      tags:
        - wireguard-iptables
  when:
    - wireguard_setup_iptables is sameas true
  tags:
    - wireguard-iptables